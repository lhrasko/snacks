@page
@model SnacksModel
@{
    ViewData["Title"] = "Snacks - Delicious Treats Await";
}

<div class="container mx-auto px-4 py-8">
    <div class="text-center mb-12">
        <h1 class="text-4xl font-bold mb-4 bg-gradient-to-r from-purple-600 to-blue-600 bg-clip-text text-transparent">
            Delicious Snacks
        </h1>
        <p class="text-lg opacity-80 max-w-2xl mx-auto">
            Discover our amazing selection of fresh snacks and treats. 
            Each item is carefully crafted to satisfy your cravings!
        </p>
    </div>

    @if (Model.Products.Any())
    {
        <div class="product-grid">
            @foreach (var product in Model.Products)
            {
                <div class="product-card" 
                     data-product-id="@product.Id" 
                     data-product-name="@product.Name" 
                     data-product-price="@product.Price">
                    <div class="product-image">
                        @{
                            var name = product.Name?.ToLower() ?? "";
                            if (name.Contains("trail")) {
                                <span>ü•ú</span>;
                            } else if (name.Contains("protein")) {
                                <span>üí™</span>;
                            } else if (name.Contains("chips")) {
                                <span>üçü</span>;
                            } else if (name.Contains("cookie")) {
                                <span>üç™</span>;
                            } else if (name.Contains("drink")) {
                                <span>ü•§</span>;
                            } else {
                                <span>üçé</span>;
                            }
                        }
                    </div>
                    <div class="product-info">
                        <h3 class="product-title">@product.Name</h3>
                        <p class="product-description">@product.Description</p>
                        <div class="product-footer">
                            <span class="product-price">$@product.Price.ToString("0.00")</span>
                            <button class="quick-add-btn" 
                                    data-product-id="@product.Id"
                                    onclick="toggleCartItem(this)">
                                <span class="add-text" style="display: flex; align-items: center; justify-content: center; gap: 0.25rem;">
                                    <span>‚ö°</span>
                                    <span>Add</span>
                                </span>
                                <span class="remove-text" style="display: none; align-items: center; justify-content: center; gap: 0.25rem;">
                                    <span>‚ùå</span>
                                    <span>Remove</span>
                                </span>
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-16">
            <div class="text-6xl mb-4">üò¥</div>
            <h2 class="text-2xl font-bold mb-4">No Snacks Available</h2>
            <p class="text-lg opacity-75">
                Looks like we're out of snacks right now. Check back soon!
            </p>
        </div>
    }
</div>

@section Scripts{
<script>
let cartCount = 0;

function triggerBounce(el) {
    el.classList.remove('dramatic-bounce');
    void el.offsetWidth;
    el.classList.add('dramatic-bounce');
}

function toggleCartItem(button) {
    const productId = parseInt(button.getAttribute('data-product-id'));
    const card = button.closest('.product-card');
    const name = card.getAttribute('data-product-name');
    const price = parseFloat(card.getAttribute('data-product-price'));

    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const existingItem = cart.find(item => item.productId == productId);

    if (existingItem) {
        // Remove item from cart
        const index = cart.findIndex(item => item.productId == productId);
        cart.splice(index, 1);
        console.log('Removed item from cart');
    } else {
        // Add item to cart
        cart.push({
            productId: productId,
            quantity: 1,
            snapshotPrice: price
        });
        console.log('Added new item to cart');
    }

    localStorage.setItem('cart', JSON.stringify(cart));
    console.log('Cart saved to localStorage:', cart);

    // Animation: bounce the product card
    triggerBounce(card);

    // Update all button states and cart display
    updateAllButtonStates();
    updateCartDisplay();
}

function addToCartFromData(element) {
    const id = parseInt(element.getAttribute('data-product-id'));
    const name = element.getAttribute('data-product-name');
    const price = parseFloat(element.getAttribute('data-product-price'));
    
    addToCart(id, name, price);
}

function addToCart(id, name, price) {
    console.log('Adding to cart:', id, name, price);
    
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const existingItem = cart.find(item => item.productId == id);
    
    if (existingItem) {
        existingItem.quantity++;
        console.log('Updated existing item quantity:', existingItem.quantity);
    } else {
        cart.push({
            productId: id,
            quantity: 1,
            snapshotPrice: price
        });
        console.log('Added new item to cart');
    }
    
    localStorage.setItem('cart', JSON.stringify(cart));
    console.log('Cart saved to localStorage:', cart);
    
    // Update cart count and show checkout button
    updateAllButtonStates();
    updateCartDisplay();
}

function updateAllButtonStates() {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    const buttons = document.querySelectorAll('.quick-add-btn');
    
    console.log('updateAllButtonStates called. Cart:', cart);
    console.log('Found buttons:', buttons.length);
    
    buttons.forEach(button => {
        const productId = parseInt(button.getAttribute('data-product-id'));
        const isInCart = cart.some(item => item.productId === productId);
        
        const addText = button.querySelector('.add-text');
        const removeText = button.querySelector('.remove-text');
        
        console.log(`Product ${productId}: isInCart=${isInCart}, addText=${!!addText}, removeText=${!!removeText}`);
        
        if (isInCart) {
            // Show remove text, hide add text
            addText.style.cssText = 'display: none !important;';
            removeText.style.cssText = 'display: flex !important; align-items: center; justify-content: center; gap: 0.25rem;';
            button.classList.add('in-cart');
            console.log(`Product ${productId}: Set to REMOVE mode`);
        } else {
            // Show add text, hide remove text
            addText.style.cssText = 'display: flex !important; align-items: center; justify-content: center; gap: 0.25rem;';
            removeText.style.cssText = 'display: none !important;';
            button.classList.remove('in-cart');
            console.log(`Product ${productId}: Set to ADD mode`);
        }
    });
}

function updateCartDisplay() {
    const cart = JSON.parse(localStorage.getItem('cart') || '[]');
    cartCount = cart.reduce((total, item) => total + item.quantity, 0);
    
    console.log('updateCartDisplay called. Cart count:', cartCount);
    console.log('Current cart:', cart);
    
    // Try multiple ways to find the checkout button
    const checkoutFab1 = document.getElementById('checkoutFab');
    const checkoutFab2 = document.querySelector('#checkoutFab');
    const checkoutFab3 = document.querySelector('.checkout-fab');
    
    console.log('getElementById result:', checkoutFab1);
    console.log('querySelector #checkoutFab result:', checkoutFab2);
    console.log('querySelector .checkout-fab result:', checkoutFab3);
    
    // List all elements with checkout in their ID or class
    const allElements = document.querySelectorAll('*');
    const checkoutElements = Array.from(allElements).filter(el => 
        el.id.includes('checkout') || 
        el.className.includes('checkout') ||
        el.tagName.toLowerCase() === 'button'
    );
    console.log('All elements with checkout or buttons:', checkoutElements);
    
    const checkoutFab = checkoutFab1 || checkoutFab2 || checkoutFab3;
    
    if (checkoutFab) {
        console.log('‚úÖ Checkout button found!');
        if (cartCount > 0) {
            checkoutFab.style.display = 'flex';
            checkoutFab.innerHTML = `View Cart ‚Ä¢ ${cartCount} item${cartCount !== 1 ? 's' : ''}`;
            console.log('‚úÖ Checkout button shown with text:', checkoutFab.innerHTML);
            
            // Add bounce animation
            checkoutFab.classList.add('dramatic-cart-bounce');
            setTimeout(() => {
                checkoutFab.classList.remove('dramatic-cart-bounce');
            }, 1000);
        } else {
            checkoutFab.style.display = 'none';
            console.log('‚ùå Checkout button hidden (cart empty)');
        }
    } else {
        console.error('‚ùå Checkout button NOT found! Element does not exist in DOM.');
        // Try to create it manually
        console.log('Attempting to create checkout button manually...');
        const button = document.createElement('button');
        button.id = 'checkoutFab';
        button.className = 'checkout-fab';
        button.onclick = () => window.location.href = '/Cart';
        button.innerHTML = `View Cart ‚Ä¢ ${cartCount} item${cartCount !== 1 ? 's' : ''}`;
        button.style.display = cartCount > 0 ? 'flex' : 'none';
        document.body.appendChild(button);
        console.log('‚úÖ Manually created checkout button');
    }
}

// Update cart count and button states on page load
document.addEventListener('DOMContentLoaded', function() {
    console.log('DOM Content Loaded');
    
    // Call immediately
    updateAllButtonStates();
    updateCartDisplay();
    
    // Also call after a short delay to ensure everything is ready
    setTimeout(() => {
        console.log('Running updateAllButtonStates after delay...');
        updateAllButtonStates();
        updateCartDisplay();
    }, 100);
    
    // Try again after a longer delay to ensure layout is fully loaded
    setTimeout(() => {
        console.log('Final attempt to find checkout button...');
        const checkoutFab = document.getElementById('checkoutFab');
        console.log('Checkout button element (delayed):', checkoutFab);
        if (checkoutFab) {
            console.log('Checkout button found after delay!');
            updateCartDisplay();
        } else {
            console.error('Checkout button still not found after delay');
        }
    }, 500);
});

// Update cart display when storage changes (useful for multiple tabs)
window.addEventListener('storage', function(e) {
    if (e.key === 'cart') {
        updateCartDisplay();
    }
});
</script>
}
