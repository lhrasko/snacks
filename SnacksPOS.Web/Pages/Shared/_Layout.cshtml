@using Microsoft.AspNetCore.Identity
@inject SignInManager<SnacksPOS.Infrastructure.ApplicationUser> SignInManager
@inject UserManager<SnacksPOS.Infrastructure.ApplicationUser> UserManager
<!DOCTYPE html>
<html lang="en" class="h-full">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    
    <!-- Prevent caching -->
    <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
    <meta http-equiv="Pragma" content="no-cache">
    <meta http-equiv="Expires" content="0">
    
    <title>@ViewData["Title"] - SnacksPOS</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        /* Force button styles to override Tailwind */
        .btn,
        button.btn,
        .btn-outline {
            padding: 0.875rem 1.75rem !important;
            display: inline-flex !important;
            align-items: center !important;
            justify-content: center !important;
            gap: 0.5rem !important;
            min-height: 2.75rem !important;
            font-weight: 600 !important;
            border-radius: 12px !important;
            transition: all 0.2s ease !important;
        }
        
        .btn-outline {
            background: rgba(255, 255, 255, 0.1) !important;
            color: #2563eb !important;
            border: 2px solid #2563eb !important;
            backdrop-filter: blur(20px) !important;
        }
        
        .btn-outline:hover {
            background: rgba(37, 99, 235, 0.1) !important;
            border-color: #1d4ed8 !important;
            color: #1d4ed8 !important;
            transform: translateY(-1px) !important;
        }
        
        /* Floating checkout button styles */
        .checkout-fab {
            position: fixed !important;
            bottom: 20px !important;
            right: 20px !important;
            z-index: 1000 !important;
            background: #16a34a !important;
            color: white !important;
            border: none !important;
            border-radius: 50px !important;
            padding: 16px 24px !important;
            font-weight: 600 !important;
            font-size: 16px !important;
            box-shadow: 0 8px 25px rgba(22, 163, 74, 0.3) !important;
            cursor: pointer !important;
            transition: all 0.3s ease !important;
        }
        
        .checkout-fab:hover {
            background: #15803d !important;
            transform: translateY(-2px) !important;
            box-shadow: 0 12px 35px rgba(22, 163, 74, 0.4) !important;
        }
    </style>
    <style>
        /* Ensure button padding is not overridden by Tailwind */
        .btn, button.btn, button[type="submit"] {
            padding: 0.875rem 1.75rem !important;
            border-radius: 12px !important;
            font-weight: 600 !important;
            display: inline-flex !important;
            align-items: center !important;
            justify-content: center !important;
            gap: 0.5rem !important;
            min-height: 2.75rem !important;
            transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1) !important;
        }
    </style>
    <link rel="manifest" href="/manifest.json" />
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <script>
        tailwind.config = {
            darkMode: 'media',
            theme: {
                extend: {
                    fontFamily: {
                        'inter': ['Inter', 'sans-serif'],
                    },
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            500: '#6366f1',
                            600: '#4f46e5',
                            700: '#4338ca',
                        }
                    }
                }
            }
        }
        if ('serviceWorker' in navigator) {
            navigator.serviceWorker.register('/service-worker.js');
        }
    </script>
</head>
<body class="min-h-full font-inter">
    <header id="main-header" class="app-header">
        <div class="container">
            <a href="/Snacks" class="app-title text-lg font-semibold">SnacksPOS</a>
            <nav class="flex items-center space-x-1">
                <a href="/Snacks" class="nav-link text-sm px-2 py-1">üçé Snacks</a>
                <a href="/Account" class="nav-link text-sm px-2 py-1">üë§ Account</a>
                @if (!SignInManager.IsSignedIn(User))
                {
                    <a href="/SignIn" class="nav-link text-sm px-2 py-1 bg-primary-500/20 hover:bg-primary-500/30 text-primary-100">
                        üîë Sign In
                    </a>
                }
            </nav>
        </div>
    </header>
    
    <main class="fade-in">
        @RenderBody()
    </main>
    
    <!-- Global Floating Checkout Button -->
    <button id="checkoutFab" class="checkout-fab" onclick="window.location.href='/Cart'" style="display: none;">
        View Cart
    </button>
    
    <footer>
        <div class="container">
            <p>&copy; 2025 SnacksPOS - Modern Point of Sale System</p>
            <p class="text-xs opacity-60 mt-1">Built with ‚ù§Ô∏è using ASP.NET Core & Modern UI</p>
        </div>
    </footer>
    
    @await RenderSectionAsync("Scripts", required: false)
    
    <script>
        // Auto-hide header functionality
        let lastScrollTop = 0;
        let isHeaderVisible = true;
        const header = document.getElementById('main-header');
        const scrollThreshold = 10;
        
        window.addEventListener('scroll', function() {
            const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
            
            if (Math.abs(scrollTop - lastScrollTop) < scrollThreshold) {
                return;
            }
            
            if (scrollTop > lastScrollTop && scrollTop > 100) {
                // Scrolling down & past initial scroll
                if (isHeaderVisible) {
                    header.classList.add('hidden');
                    isHeaderVisible = false;
                }
            } else {
                // Scrolling up
                if (!isHeaderVisible) {
                    header.classList.remove('hidden');
                    isHeaderVisible = true;
                }
            }
            
            lastScrollTop = scrollTop;
        });
        
        // Handle checkout FAB behavior based on page
        document.addEventListener('DOMContentLoaded', function() {
            const checkoutFab = document.getElementById('checkoutFab');
            if (checkoutFab) {
                if (window.location.pathname === '/Cart') {
                    // On cart page, change to checkout functionality
                    checkoutFab.onclick = function() {
                        // Trigger the checkout function from the cart page
                        if (typeof checkout === 'function') {
                            checkout();
                        }
                    };
                    // Let the cart page handle visibility
                } else {
                    // On other pages, keep original "View Cart" functionality
                    checkoutFab.onclick = function() {
                        window.location.href = '/Cart';
                    };
                }
            }
        });
        
        // Prevent browser caching - force page reload when navigating back
        window.addEventListener('pageshow', function(event) {
            if (event.persisted) {
                window.location.reload();
            }
        });
        
        // Disable browser cache for AJAX requests
        if (window.fetch) {
            const originalFetch = window.fetch;
            window.fetch = function(url, options = {}) {
                options.headers = options.headers || {};
                options.headers['Cache-Control'] = 'no-cache, no-store, must-revalidate';
                options.headers['Pragma'] = 'no-cache';
                options.headers['Expires'] = '0';
                
                // Add cache-busting parameter to URL
                const separator = url.includes('?') ? '&' : '?';
                const cacheBuster = separator + '_t=' + Date.now();
                if (typeof url === 'string') {
                    url = url + cacheBuster;
                }
                
                return originalFetch(url, options);
            };
        }
    </script>
</body>
</html>
